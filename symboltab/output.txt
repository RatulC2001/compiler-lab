***TOKENS AFTER SCANNING INPUT FILE***

MAIN -> main@1
open_first_bracket -> (@1
close_first_bracket -> )@1
open_second_bracket -> {@2
d_type -> int@3
ID -> r@3
semicolon -> ;@3
d_type -> real@4
ID -> x@4
ID -> y@4
equals -> =@4
REAL -> 6.5@4
semicolon -> ;@4
d_type -> char@5
ID -> z@5
semicolon -> ;@5
if_token -> if@7
open_first_bracket -> (@7
ID -> x@7
comp_op -> >@7
INTEGER -> 20@7
close_first_bracket -> )@7
then_token -> then@7
open_second_bracket -> {@8
d_type -> char@9
ID -> eps@9
semicolon -> ;@9
d_type -> real@10
ID -> def@10
equals -> =@10
REAL -> 2.3@10
ID -> abc@10
equals -> =@10
REAL -> 4.5@10
semicolon -> ;@10
d_type -> int@11
ID -> z@11
semicolon -> ;@11
output -> cout@12
o_cas -> <<@12
CHARACTER -> 'Y'@12
semicolon -> ;@12
ID -> x@13
equals -> =@13
INTEGER -> 20@13
semicolon -> ;@13
close_second_bracket -> }@14
else_token -> else@15
open_second_bracket -> {@16
d_type -> char@17
ID -> alpha@17
ID -> beta@17
semicolon -> ;@17
d_type -> int@18
ID -> gg@18
semicolon -> ;@18
input -> cin@19
i_cas -> >>@19
ID -> x@19
semicolon -> ;@19
output -> cout@20
o_cas -> <<@20
CHARACTER -> 'N'@20
semicolon -> ;@20
if_token -> if@21
open_first_bracket -> (@21
ID -> x@21
comp_op -> >@21
INTEGER -> 10@21
close_first_bracket -> )@21
then_token -> then@21
open_second_bracket -> {@22
d_type -> int@23
ID -> num@23
semicolon -> ;@23
d_type -> real@24
ID -> number@24
semicolon -> ;@24
output -> cout@25
o_cas -> <<@25
CHARACTER -> 'Y'@25
o_cas -> <<@25
ID -> x@25
semicolon -> ;@25
close_second_bracket -> }@26
semicolon -> ;@26
close_second_bracket -> }@27
semicolon -> ;@27
ID -> x@29
equals -> =@29
INTEGER -> 20@29
semicolon -> ;@29
d_type -> int@31
ID -> a@31
equals -> =@31
INTEGER -> 5@31
semicolon -> ;@31
d_type -> real@32
ID -> b@32
equals -> =@32
REAL -> 3.2@32
semicolon -> ;@32
output -> cout@33
o_cas -> <<@33
ID -> a@33
semicolon -> ;@33
if_token -> if@35
open_first_bracket -> (@35
ID -> a@35
comp_op -> ==@35
INTEGER -> 5@35
close_first_bracket -> )@35
then_token -> then@35
open_second_bracket -> {@36
output -> cout@37
o_cas -> <<@37
ID -> b@37
semicolon -> ;@37
close_second_bracket -> }@38
else_token -> else@39
open_second_bracket -> {@40
output -> cout@41
o_cas -> <<@41
ID -> a@41
o_cas -> <<@41
ID -> b@41
semicolon -> ;@41
if_token -> if@42
open_first_bracket -> (@42
ID -> a@42
comp_op -> >@42
INTEGER -> 10@42
close_first_bracket -> )@42
then_token -> then@42
open_second_bracket -> {@43
output -> cout@44
o_cas -> <<@44
ID -> io@44
semicolon -> ;@44
d_type -> real@45
ID -> io@45
semicolon -> ;@45
output -> cout@46
o_cas -> <<@46
CHARACTER -> 'Z'@46
o_cas -> <<@46
ID -> a@46
semicolon -> ;@46
close_second_bracket -> }@47
semicolon -> ;@47
close_second_bracket -> }@48
semicolon -> ;@48
close_second_bracket -> }@49
