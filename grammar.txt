S -> main open_first_bracket close_first_bracket open_second_bracket statements close_second_bracket
statements -> statement;statements | _e_
statement -> dec_st | math_st | io | if_st | _e_
dec_st -> d_type d_prod
d_prod -> d_nat | d_prod,d_nat
d_nat -> ID | math_st
math_st -> ID equals VALUE | ID equals math_st
io -> "input" inp | "output" opt ;
inp -> "i_cas" "ID" | inp "i_cas" "ID" ;
opt -> "o_cas" VALUE | opt "o_cas" VALUE ;
if_st -> if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT
CONT -> else_token open_second_bracket statements close_second_bracket | _e_
comp_st -> VALUE comp_op VALUE | open_first_bracket comp_st close_first_bracket relational_op open_first_bracket comp_st close_first_bracket
VALUE -> VALUE add_op TERM | add_op TERM | TERM
TERM -> TERM mul_op FAC | FAC 
FAC -> "ID" | "NUMBER" | "CHARACTER" | "(" VALUE ")" 

/*
add_op -> + | - 
mul_op -> * | / | %
d_type -> int | real | char
comp_op -> < | > | >= | <= | == | !=
open_first_bracket -> (
close_first_bracket -> )
open_second_bracket -> {
close_second_bracket -> }
equals -> =
i_cas -> >>
o_cas -> <<
input -> cin
output -> cout
if_token -> if
then_token -> then
else_token -> else
relational_op -> and | or | not
*/

