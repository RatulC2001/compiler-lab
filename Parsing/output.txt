I (0)
S ->  . St 
St ->  . main ( ) { statements } 

I (1)
St -> main  . ( ) { statements } 

I (2)
St -> main (  . ) { statements } 

I (3)
St -> main ( )  . { statements } 

I (4)
St -> main ( ) {  . statements } 
statements ->  . %empty 
statements ->  . statement ; statements 
statement ->  . dec_st 
statement ->  . math_st 
statement ->  . io 
statement ->  . if_st 
statement ->  . %empty 
if_st ->  . if_token ( comp_st ) then_token { statements } CONT 
io ->  . input inp 
io ->  . output opt 
math_st ->  . ID equ VALUE 
math_st ->  . ID equ math_st 
dec_st ->  . dtype d_prod 

I (5)
math_st -> ID  . equ VALUE 
math_st -> ID  . equ math_st 

I (6)
math_st -> ID equ  . VALUE 
math_st -> ID equ  . math_st 
math_st ->  . ID equ VALUE 
math_st ->  . ID equ math_st 
VALUE ->  . VALUE addop TERM 
VALUE ->  . addop TERM 
VALUE ->  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (7)
FAC -> CHARACTER"  . FAC : ( VALUE ) 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (8)
FAC -> ID  . 

I (9)
FAC -> NUMBER  . 

I (10)
FAC -> CHARACTER" FAC  . : ( VALUE ) 

I (11)
FAC -> CHARACTER" FAC :  . ( VALUE ) 

I (12)
FAC -> CHARACTER" FAC : (  . VALUE ) 
VALUE ->  . VALUE addop TERM 
VALUE ->  . addop TERM 
VALUE ->  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (13)
VALUE -> addop  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (14)
TERM -> FAC  . 

I (15)
VALUE -> addop TERM  . 
TERM -> TERM  . mulop FAC 

I (16)
TERM -> TERM mulop  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (17)
TERM -> TERM mulop FAC  . 

I (18)
VALUE -> TERM  . 
TERM -> TERM  . mulop FAC 

I (19)
FAC -> CHARACTER" FAC : ( VALUE  . ) 
VALUE -> VALUE  . addop TERM 

I (20)
FAC -> CHARACTER" FAC : ( VALUE )  . 

I (21)
VALUE -> VALUE addop  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (22)
VALUE -> VALUE addop TERM  . 
TERM -> TERM  . mulop FAC 

I (23)
math_st -> ID  . equ VALUE 
math_st -> ID  . equ math_st 
FAC -> ID  . 

I (24)
math_st -> ID equ VALUE  . 
VALUE -> VALUE  . addop TERM 

I (25)
math_st -> ID equ math_st  . 

I (26)
dec_st -> dtype  . d_prod 
d_prod ->  . d_nat 
d_prod ->  . d_prod , d_nat 
d_nat ->  . ID 
d_nat ->  . math_st 
math_st ->  . ID equ VALUE 
math_st ->  . ID equ math_st 

I (27)
d_nat -> ID  . 
math_st -> ID  . equ VALUE 
math_st -> ID  . equ math_st 

I (28)
d_prod -> d_nat  . 

I (29)
dec_st -> dtype d_prod  . 
d_prod -> d_prod  . , d_nat 

I (30)
d_prod -> d_prod ,  . d_nat 
d_nat ->  . ID 
d_nat ->  . math_st 
math_st ->  . ID equ VALUE 
math_st ->  . ID equ math_st 

I (31)
d_prod -> d_prod , d_nat  . 

I (32)
d_nat -> math_st  . 

I (33)
if_st -> if_token  . ( comp_st ) then_token { statements } CONT 

I (34)
if_st -> if_token (  . comp_st ) then_token { statements } CONT 
comp_st ->  . VALUE comp_op VALUE 
comp_st ->  . ( comp_st ) r_o ( comp_st ) 
VALUE ->  . VALUE addop TERM 
VALUE ->  . addop TERM 
VALUE ->  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (35)
comp_st -> (  . comp_st ) r_o ( comp_st ) 
comp_st ->  . VALUE comp_op VALUE 
comp_st ->  . ( comp_st ) r_o ( comp_st ) 
VALUE ->  . VALUE addop TERM 
VALUE ->  . addop TERM 
VALUE ->  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (36)
comp_st -> VALUE  . comp_op VALUE 
VALUE -> VALUE  . addop TERM 

I (37)
comp_st -> VALUE comp_op  . VALUE 
VALUE ->  . VALUE addop TERM 
VALUE ->  . addop TERM 
VALUE ->  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (38)
comp_st -> VALUE comp_op VALUE  . 
VALUE -> VALUE  . addop TERM 

I (39)
comp_st -> ( comp_st  . ) r_o ( comp_st ) 

I (40)
comp_st -> ( comp_st )  . r_o ( comp_st ) 

I (41)
comp_st -> ( comp_st ) r_o  . ( comp_st ) 

I (42)
comp_st -> ( comp_st ) r_o (  . comp_st ) 
comp_st ->  . VALUE comp_op VALUE 
comp_st ->  . ( comp_st ) r_o ( comp_st ) 
VALUE ->  . VALUE addop TERM 
VALUE ->  . addop TERM 
VALUE ->  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (43)
comp_st -> ( comp_st ) r_o ( comp_st  . ) 

I (44)
comp_st -> ( comp_st ) r_o ( comp_st )  . 

I (45)
if_st -> if_token ( comp_st  . ) then_token { statements } CONT 

I (46)
if_st -> if_token ( comp_st )  . then_token { statements } CONT 

I (47)
if_st -> if_token ( comp_st ) then_token  . { statements } CONT 

I (48)
if_st -> if_token ( comp_st ) then_token {  . statements } CONT 
statements ->  . %empty 
statements ->  . statement ; statements 
statement ->  . dec_st 
statement ->  . math_st 
statement ->  . io 
statement ->  . if_st 
statement ->  . %empty 
if_st ->  . if_token ( comp_st ) then_token { statements } CONT 
io ->  . input inp 
io ->  . output opt 
math_st ->  . ID equ VALUE 
math_st ->  . ID equ math_st 
dec_st ->  . dtype d_prod 

I (49)
io -> input  . inp 
inp ->  . i_cas ID 
inp ->  . inp i_cas ID 

I (50)
inp -> i_cas  . ID 

I (51)
inp -> i_cas ID  . 

I (52)
io -> input inp  . 
inp -> inp  . i_cas ID 

I (53)
inp -> inp i_cas  . ID 

I (54)
inp -> inp i_cas ID  . 

I (55)
io -> output  . opt 
opt ->  . o_cas VALUE 
opt ->  . opt o_cas VALUE 

I (56)
opt -> o_cas  . VALUE 
VALUE ->  . VALUE addop TERM 
VALUE ->  . addop TERM 
VALUE ->  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (57)
opt -> o_cas VALUE  . 
VALUE -> VALUE  . addop TERM 

I (58)
io -> output opt  . 
opt -> opt  . o_cas VALUE 

I (59)
opt -> opt o_cas  . VALUE 
VALUE ->  . VALUE addop TERM 
VALUE ->  . addop TERM 
VALUE ->  . TERM 
TERM ->  . TERM mulop FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . NUMBER 
FAC ->  . CHARACTER" FAC : ( VALUE ) 

I (60)
opt -> opt o_cas VALUE  . 
VALUE -> VALUE  . addop TERM 

I (61)
statements -> %empty  . 
statement -> %empty  . 

I (62)
statement -> dec_st  . 

I (63)
statement -> if_st  . 

I (64)
statement -> io  . 

I (65)
statement -> math_st  . 

I (66)
statements -> statement  . ; statements 

I (67)
statements -> statement ;  . statements 
statements ->  . %empty 
statements ->  . statement ; statements 
statement ->  . dec_st 
statement ->  . math_st 
statement ->  . io 
statement ->  . if_st 
statement ->  . %empty 
if_st ->  . if_token ( comp_st ) then_token { statements } CONT 
io ->  . input inp 
io ->  . output opt 
math_st ->  . ID equ VALUE 
math_st ->  . ID equ math_st 
dec_st ->  . dtype d_prod 

I (68)
statements -> statement ; statements  . 

I (69)
if_st -> if_token ( comp_st ) then_token { statements  . } CONT 

I (70)
if_st -> if_token ( comp_st ) then_token { statements }  . CONT 
CONT ->  . else_token { statements } 
CONT ->  . %empty 

I (71)
CONT -> else_token  . { statements } 

I (72)
CONT -> else_token {  . statements } 
statements ->  . %empty 
statements ->  . statement ; statements 
statement ->  . dec_st 
statement ->  . math_st 
statement ->  . io 
statement ->  . if_st 
statement ->  . %empty 
if_st ->  . if_token ( comp_st ) then_token { statements } CONT 
io ->  . input inp 
io ->  . output opt 
math_st ->  . ID equ VALUE 
math_st ->  . ID equ math_st 
dec_st ->  . dtype d_prod 

I (73)
CONT -> else_token { statements  . } 

I (74)
CONT -> else_token { statements }  . 

I (75)
CONT -> %empty  . 

I (76)
if_st -> if_token ( comp_st ) then_token { statements } CONT  . 

I (77)
St -> main ( ) { statements  . } 

I (78)
St -> main ( ) { statements }  . 

I (79)
S -> St  . 

