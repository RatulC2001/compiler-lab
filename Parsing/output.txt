I (0)
S ->  . St 
St ->  . MAIN open_first_bracket close_first_bracket open_second_bracket statements close_second_bracket 

I (1)
St -> MAIN  . open_first_bracket close_first_bracket open_second_bracket statements close_second_bracket 

I (2)
St -> MAIN open_first_bracket  . close_first_bracket open_second_bracket statements close_second_bracket 

I (3)
St -> MAIN open_first_bracket close_first_bracket  . open_second_bracket statements close_second_bracket 

I (4)
St -> MAIN open_first_bracket close_first_bracket open_second_bracket  . statements close_second_bracket 
statements ->  . %empty 
statements ->  . statement EOL statements 
statement ->  . dec_st 
statement ->  . math_st 
statement ->  . io 
statement ->  . if_st 
if_st ->  . if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT 
io ->  . input inp 
io ->  . output opt 
math_st ->  . ID equals VALUE 
dec_st ->  . d_type d_prod 

I (5)
math_st -> ID  . equals VALUE 

I (6)
math_st -> ID equals  . VALUE 
VALUE ->  . VALUE add_op TERM 
VALUE ->  . add_op TERM 
VALUE ->  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (7)
FAC -> CHARACTER  . 

I (8)
FAC -> ID  . 

I (9)
FAC -> INTEGER  . 

I (10)
FAC -> REAL  . 

I (11)
VALUE -> add_op  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (12)
FAC -> open_first_bracket  . VALUE close_first_bracket 
VALUE ->  . VALUE add_op TERM 
VALUE ->  . add_op TERM 
VALUE ->  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (13)
TERM -> FAC  . 

I (14)
VALUE -> TERM  . 
TERM -> TERM  . mul_op FAC 

I (15)
TERM -> TERM mul_op  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (16)
TERM -> TERM mul_op FAC  . 

I (17)
FAC -> open_first_bracket VALUE  . close_first_bracket 
VALUE -> VALUE  . add_op TERM 

I (18)
VALUE -> VALUE add_op  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (19)
VALUE -> VALUE add_op TERM  . 
TERM -> TERM  . mul_op FAC 

I (20)
FAC -> open_first_bracket VALUE close_first_bracket  . 

I (21)
VALUE -> add_op TERM  . 
TERM -> TERM  . mul_op FAC 

I (22)
math_st -> ID equals VALUE  . 
VALUE -> VALUE  . add_op TERM 

I (23)
dec_st -> d_type  . d_prod 
d_prod ->  . d_nat 
d_prod ->  . d_prod COMMA d_nat 
d_nat ->  . ID 
d_nat ->  . math_st 
math_st ->  . ID equals VALUE 

I (24)
d_nat -> ID  . 
math_st -> ID  . equals VALUE 

I (25)
d_prod -> d_nat  . 

I (26)
dec_st -> d_type d_prod  . 
d_prod -> d_prod  . COMMA d_nat 

I (27)
d_prod -> d_prod COMMA  . d_nat 
d_nat ->  . ID 
d_nat ->  . math_st 
math_st ->  . ID equals VALUE 

I (28)
d_prod -> d_prod COMMA d_nat  . 

I (29)
d_nat -> math_st  . 

I (30)
if_st -> if_token  . open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT 

I (31)
if_st -> if_token open_first_bracket  . comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT 
comp_st ->  . VALUE comp_op VALUE 
comp_st ->  . open_first_bracket comp_st close_first_bracket relational_op open_first_bracket comp_st close_first_bracket 
VALUE ->  . VALUE add_op TERM 
VALUE ->  . add_op TERM 
VALUE ->  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (32)
comp_st -> open_first_bracket  . comp_st close_first_bracket relational_op open_first_bracket comp_st close_first_bracket 
FAC -> open_first_bracket  . VALUE close_first_bracket 
VALUE ->  . VALUE add_op TERM 
VALUE ->  . add_op TERM 
VALUE ->  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 
comp_st ->  . VALUE comp_op VALUE 
comp_st ->  . open_first_bracket comp_st close_first_bracket relational_op open_first_bracket comp_st close_first_bracket 

I (33)
FAC -> open_first_bracket  . VALUE close_first_bracket 
comp_st -> open_first_bracket  . comp_st close_first_bracket relational_op open_first_bracket comp_st close_first_bracket 
comp_st ->  . VALUE comp_op VALUE 
comp_st ->  . open_first_bracket comp_st close_first_bracket relational_op open_first_bracket comp_st close_first_bracket 
VALUE ->  . VALUE add_op TERM 
VALUE ->  . add_op TERM 
VALUE ->  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (34)
FAC -> open_first_bracket VALUE  . close_first_bracket 
comp_st -> VALUE  . comp_op VALUE 
VALUE -> VALUE  . add_op TERM 

I (35)
comp_st -> VALUE comp_op  . VALUE 
VALUE ->  . VALUE add_op TERM 
VALUE ->  . add_op TERM 
VALUE ->  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (36)
comp_st -> VALUE comp_op VALUE  . 
VALUE -> VALUE  . add_op TERM 

I (37)
comp_st -> open_first_bracket comp_st  . close_first_bracket relational_op open_first_bracket comp_st close_first_bracket 

I (38)
comp_st -> open_first_bracket comp_st close_first_bracket  . relational_op open_first_bracket comp_st close_first_bracket 

I (39)
comp_st -> open_first_bracket comp_st close_first_bracket relational_op  . open_first_bracket comp_st close_first_bracket 

I (40)
comp_st -> open_first_bracket comp_st close_first_bracket relational_op open_first_bracket  . comp_st close_first_bracket 
comp_st ->  . VALUE comp_op VALUE 
comp_st ->  . open_first_bracket comp_st close_first_bracket relational_op open_first_bracket comp_st close_first_bracket 
VALUE ->  . VALUE add_op TERM 
VALUE ->  . add_op TERM 
VALUE ->  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (41)
comp_st -> VALUE  . comp_op VALUE 
VALUE -> VALUE  . add_op TERM 

I (42)
comp_st -> open_first_bracket comp_st close_first_bracket relational_op open_first_bracket comp_st  . close_first_bracket 

I (43)
comp_st -> open_first_bracket comp_st close_first_bracket relational_op open_first_bracket comp_st close_first_bracket  . 

I (44)
FAC -> open_first_bracket VALUE  . close_first_bracket 
VALUE -> VALUE  . add_op TERM 
comp_st -> VALUE  . comp_op VALUE 

I (45)
if_st -> if_token open_first_bracket comp_st  . close_first_bracket then_token open_second_bracket statements close_second_bracket CONT 

I (46)
if_st -> if_token open_first_bracket comp_st close_first_bracket  . then_token open_second_bracket statements close_second_bracket CONT 

I (47)
if_st -> if_token open_first_bracket comp_st close_first_bracket then_token  . open_second_bracket statements close_second_bracket CONT 

I (48)
if_st -> if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket  . statements close_second_bracket CONT 
statements ->  . %empty 
statements ->  . statement EOL statements 
statement ->  . dec_st 
statement ->  . math_st 
statement ->  . io 
statement ->  . if_st 
if_st ->  . if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT 
io ->  . input inp 
io ->  . output opt 
math_st ->  . ID equals VALUE 
dec_st ->  . d_type d_prod 

I (49)
io -> input  . inp 
inp ->  . i_cas ID 
inp ->  . inp i_cas ID 

I (50)
inp -> i_cas  . ID 

I (51)
inp -> i_cas ID  . 

I (52)
io -> input inp  . 
inp -> inp  . i_cas ID 

I (53)
inp -> inp i_cas  . ID 

I (54)
inp -> inp i_cas ID  . 

I (55)
io -> output  . opt 
opt ->  . o_cas VALUE 
opt ->  . opt o_cas VALUE 

I (56)
opt -> o_cas  . VALUE 
VALUE ->  . VALUE add_op TERM 
VALUE ->  . add_op TERM 
VALUE ->  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (57)
opt -> o_cas VALUE  . 
VALUE -> VALUE  . add_op TERM 

I (58)
io -> output opt  . 
opt -> opt  . o_cas VALUE 

I (59)
opt -> opt o_cas  . VALUE 
VALUE ->  . VALUE add_op TERM 
VALUE ->  . add_op TERM 
VALUE ->  . TERM 
TERM ->  . TERM mul_op FAC 
TERM ->  . FAC 
FAC ->  . ID 
FAC ->  . REAL 
FAC ->  . INTEGER 
FAC ->  . CHARACTER 
FAC ->  . open_first_bracket VALUE close_first_bracket 

I (60)
opt -> opt o_cas VALUE  . 
VALUE -> VALUE  . add_op TERM 

I (61)
statements -> %empty  . 

I (62)
statement -> dec_st  . 

I (63)
statement -> if_st  . 

I (64)
statement -> io  . 

I (65)
statement -> math_st  . 

I (66)
statements -> statement  . EOL statements 

I (67)
statements -> statement EOL  . statements 
statements ->  . %empty 
statements ->  . statement EOL statements 
statement ->  . dec_st 
statement ->  . math_st 
statement ->  . io 
statement ->  . if_st 
if_st ->  . if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT 
io ->  . input inp 
io ->  . output opt 
math_st ->  . ID equals VALUE 
dec_st ->  . d_type d_prod 

I (68)
statements -> statement EOL statements  . 

I (69)
if_st -> if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements  . close_second_bracket CONT 

I (70)
if_st -> if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket  . CONT 
CONT ->  . else_token open_second_bracket statements close_second_bracket 
CONT ->  . %empty 

I (71)
CONT -> else_token  . open_second_bracket statements close_second_bracket 

I (72)
CONT -> else_token open_second_bracket  . statements close_second_bracket 
statements ->  . %empty 
statements ->  . statement EOL statements 
statement ->  . dec_st 
statement ->  . math_st 
statement ->  . io 
statement ->  . if_st 
if_st ->  . if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT 
io ->  . input inp 
io ->  . output opt 
math_st ->  . ID equals VALUE 
dec_st ->  . d_type d_prod 

I (73)
CONT -> else_token open_second_bracket statements  . close_second_bracket 

I (74)
CONT -> else_token open_second_bracket statements close_second_bracket  . 

I (75)
CONT -> %empty  . 

I (76)
if_st -> if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT  . 

I (77)
St -> MAIN open_first_bracket close_first_bracket open_second_bracket statements  . close_second_bracket 

I (78)
St -> MAIN open_first_bracket close_first_bracket open_second_bracket statements close_second_bracket  . 

I (79)
S -> St  . 

STACK : 0 
SYMBOLS : 
INPUT : MAIN open_first_bracket close_first_bracket open_second_bracket d_type ID EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 
SYMBOLS : MAIN 
INPUT : open_first_bracket close_first_bracket open_second_bracket d_type ID EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 
SYMBOLS : MAIN open_first_bracket 
INPUT : close_first_bracket open_second_bracket d_type ID EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 
SYMBOLS : MAIN open_first_bracket close_first_bracket 
INPUT : open_second_bracket d_type ID EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket 
INPUT : d_type ID EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 23 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket d_type 
INPUT : ID EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 23 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket d_type ID 
INPUT : EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 23 25 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket d_type d_nat 
INPUT : EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket d_type d_prod 
INPUT : EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 62 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket dec_st 
INPUT : EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement 
INPUT : EOL d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL 
INPUT : d_type ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type 
INPUT : ID equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type ID 
INPUT : equals REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 24 6 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type ID equals 
INPUT : REAL COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 24 6 10 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type ID equals REAL 
INPUT : COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 24 6 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type ID equals FAC 
INPUT : COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 24 6 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type ID equals TERM 
INPUT : COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 24 6 22 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type ID equals VALUE 
INPUT : COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 29 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type math_st 
INPUT : COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 25 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_nat 
INPUT : COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod 
INPUT : COMMA ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 27 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod COMMA 
INPUT : ID equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 27 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod COMMA ID 
INPUT : equals REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 27 24 6 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod COMMA ID equals 
INPUT : REAL EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 27 24 6 10 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod COMMA ID equals REAL 
INPUT : EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 27 24 6 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod COMMA ID equals FAC 
INPUT : EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 27 24 6 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod COMMA ID equals TERM 
INPUT : EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 27 24 6 22 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod COMMA ID equals VALUE 
INPUT : EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 27 29 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod COMMA math_st 
INPUT : EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 27 28 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod COMMA d_nat 
INPUT : EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL d_type d_prod 
INPUT : EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 62 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL dec_st 
INPUT : EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement 
INPUT : EOL d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL 
INPUT : d_type ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 23 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL d_type 
INPUT : ID EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 23 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL d_type ID 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 23 25 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL d_type d_nat 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL d_type d_prod 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 62 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL dec_st 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL 
INPUT : if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token 
INPUT : open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket 
INPUT : ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 8 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket ID 
INPUT : comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket FAC 
INPUT : comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket TERM 
INPUT : comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 41 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket VALUE 
INPUT : comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 41 35 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op 
INPUT : INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 41 35 9 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op INTEGER 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 41 35 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op FAC 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 41 35 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op TERM 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 41 35 36 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op VALUE 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket 
INPUT : then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token 
INPUT : open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket 
INPUT : d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 23 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket d_type 
INPUT : ID EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 23 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket d_type ID 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 23 25 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket d_type d_nat 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket d_type d_prod 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 62 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket dec_st 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL 
INPUT : d_type ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 23 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL d_type 
INPUT : ID EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 23 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL d_type ID 
INPUT : EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 23 25 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL d_type d_nat 
INPUT : EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL d_type d_prod 
INPUT : EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 62 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL dec_st 
INPUT : EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement 
INPUT : EOL output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL 
INPUT : output o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output 
INPUT : o_cas CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas 
INPUT : CHARACTER EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 7 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas CHARACTER 
INPUT : EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas FAC 
INPUT : EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas TERM 
INPUT : EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 57 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas VALUE 
INPUT : EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 58 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output opt 
INPUT : EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 64 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL io 
INPUT : EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement 
INPUT : EOL ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL 
INPUT : ID equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 5 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL ID 
INPUT : equals INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 5 6 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL ID equals 
INPUT : INTEGER EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 5 6 9 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL ID equals INTEGER 
INPUT : EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 5 6 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL ID equals FAC 
INPUT : EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 5 6 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL ID equals TERM 
INPUT : EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 5 6 22 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL ID equals VALUE 
INPUT : EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 65 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL math_st 
INPUT : EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL statement 
INPUT : EOL close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL statement EOL 
INPUT : close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL statement EOL 
INPUT : %empty close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 66 67 61 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL statement EOL %empty 
INPUT : close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL statement EOL statements 
INPUT : close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL statements 
INPUT : close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statements 
INPUT : close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statements 
INPUT : close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements 
INPUT : close_second_bracket else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket 
INPUT : else_token open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token 
INPUT : open_second_bracket d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket 
INPUT : d_type ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 23 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket d_type 
INPUT : ID EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 23 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket d_type ID 
INPUT : EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 23 25 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket d_type d_nat 
INPUT : EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket d_type d_prod 
INPUT : EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 62 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket dec_st 
INPUT : EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement 
INPUT : EOL d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL 
INPUT : d_type ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 23 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL d_type 
INPUT : ID EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 23 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL d_type ID 
INPUT : EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 23 25 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL d_type d_nat 
INPUT : EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL d_type d_prod 
INPUT : EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 62 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL dec_st 
INPUT : EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement 
INPUT : EOL input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL 
INPUT : input i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 49 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL input 
INPUT : i_cas ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 49 50 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL input i_cas 
INPUT : ID EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 49 50 51 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL input i_cas ID 
INPUT : EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 49 52 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL input inp 
INPUT : EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 64 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL io 
INPUT : EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement 
INPUT : EOL output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL 
INPUT : output o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 55 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL output 
INPUT : o_cas CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 55 56 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL output o_cas 
INPUT : CHARACTER EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 55 56 7 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL output o_cas CHARACTER 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 55 56 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL output o_cas FAC 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 55 56 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL output o_cas TERM 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 55 56 57 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL output o_cas VALUE 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 55 58 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL output opt 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 64 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL io 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement 
INPUT : EOL if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL 
INPUT : if_token open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token 
INPUT : open_first_bracket ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket 
INPUT : ID comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 8 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket ID 
INPUT : comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket FAC 
INPUT : comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket TERM 
INPUT : comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 41 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket VALUE 
INPUT : comp_op INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 41 35 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op 
INPUT : INTEGER close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 41 35 9 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op INTEGER 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 41 35 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op FAC 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 41 35 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op TERM 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 41 35 36 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket VALUE comp_op VALUE 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st 
INPUT : close_first_bracket then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket 
INPUT : then_token open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token 
INPUT : open_second_bracket d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket 
INPUT : d_type ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 23 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket d_type 
INPUT : ID EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 23 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket d_type ID 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 23 25 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket d_type d_nat 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket d_type d_prod 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 62 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket dec_st 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement 
INPUT : EOL d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL 
INPUT : d_type ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 23 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL d_type 
INPUT : ID EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 23 24 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL d_type ID 
INPUT : EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 23 25 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL d_type d_nat 
INPUT : EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 23 26 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL d_type d_prod 
INPUT : EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 62 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL dec_st 
INPUT : EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement 
INPUT : EOL output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL 
INPUT : output o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output 
INPUT : o_cas CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas 
INPUT : CHARACTER EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 7 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas CHARACTER 
INPUT : EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas FAC 
INPUT : EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas TERM 
INPUT : EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 56 57 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output o_cas VALUE 
INPUT : EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 55 58 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL output opt 
INPUT : EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 64 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL io 
INPUT : EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement 
INPUT : EOL close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL 
INPUT : close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL 
INPUT : %empty close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 61 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL %empty 
INPUT : close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statement EOL statements 
INPUT : close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statement EOL statements 
INPUT : close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statement EOL statements 
INPUT : close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 69 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements 
INPUT : close_second_bracket EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 69 70 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket 
INPUT : EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 69 70 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket 
INPUT : %empty EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 69 70 75 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket %empty 
INPUT : EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 30 31 45 46 47 48 69 70 76 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT 
INPUT : EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 63 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL if_st 
INPUT : EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL statement 
INPUT : EOL close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL statement EOL 
INPUT : close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL statement EOL 
INPUT : %empty close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 66 67 61 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL statement EOL %empty 
INPUT : close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL statement EOL statements 
INPUT : close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statement EOL statements 
INPUT : close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statement EOL statements 
INPUT : close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statement EOL statements 
INPUT : close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statement EOL statements 
INPUT : close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 73 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statements 
INPUT : close_second_bracket EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 71 72 73 74 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket else_token open_second_bracket statements close_second_bracket 
INPUT : EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 30 31 45 46 47 48 69 70 76 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_token open_first_bracket comp_st close_first_bracket then_token open_second_bracket statements close_second_bracket CONT 
INPUT : EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 63 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL if_st 
INPUT : EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement 
INPUT : EOL ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL 
INPUT : ID equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 5 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL ID 
INPUT : equals INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 5 6 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL ID equals 
INPUT : INTEGER EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 5 6 9 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL ID equals INTEGER 
INPUT : EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 5 6 13 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL ID equals FAC 
INPUT : EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 5 6 14 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL ID equals TERM 
INPUT : EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 5 6 22 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL ID equals VALUE 
INPUT : EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 65 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL math_st 
INPUT : EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 66 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL statement 
INPUT : EOL close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL statement EOL 
INPUT : close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 66 67 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL statement EOL 
INPUT : %empty close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 66 67 61 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL statement EOL %empty 
INPUT : close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL statement EOL statements 
INPUT : close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statement EOL statements 
INPUT : close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statement EOL statements 
INPUT : close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statement EOL statements 
INPUT : close_second_bracket $ 

STACK : 0 1 2 3 4 66 67 68 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statement EOL statements 
INPUT : close_second_bracket $ 

STACK : 0 1 2 3 4 77 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statements 
INPUT : close_second_bracket $ 

STACK : 0 1 2 3 4 77 78 
SYMBOLS : MAIN open_first_bracket close_first_bracket open_second_bracket statements close_second_bracket 
INPUT : $ 

STACK : 0 79 
SYMBOLS : St 
INPUT : $ 


