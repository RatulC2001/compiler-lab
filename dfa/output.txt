***TOKENS AFTER SCANNING INPUT FILE***

MAIN -> main@1
open_first_bracket -> (@1
close_first_bracket -> )@1
open_second_bracket -> {@2
d_type -> int@3
ID -> r@3
semicolon -> ;@3
d_type -> real@4
ID -> x@4
COMMA -> ,@4
ID -> y@4
equals -> =@4
REAL -> 6.5@4
semicolon -> ;@4
d_type -> char@5
ID -> z@5
COMMA -> ,@5
ID -> another@5
semicolon -> ;@5
d_type -> int@7
ID -> avigyantesting@7
equals -> =@7
INTEGER -> 6@7
mul_op -> *@7
INTEGER -> 20@7
add_op -> -@7
INTEGER -> 100@7
semicolon -> ;@7
if_token -> if@9
open_first_bracket -> (@9
ID -> x@9
comp_op -> >@9
INTEGER -> 20@9
close_first_bracket -> )@9
then_token -> then@9
open_second_bracket -> {@10
d_type -> char@11
ID -> eps@11
semicolon -> ;@11
d_type -> real@12
ID -> def@12
equals -> =@12
REAL -> 2.3@12
COMMA -> ,@12
ID -> abc@12
equals -> =@12
REAL -> 4.5@12
semicolon -> ;@12
d_type -> int@13
ID -> z@13
semicolon -> ;@13
output -> cout@14
o_cas -> <<@14
CHARACTER -> 'Y'@14
semicolon -> ;@14
ID -> x@15
equals -> =@15
INTEGER -> 20@15
semicolon -> ;@15
close_second_bracket -> }@16
else_token -> else@17
open_second_bracket -> {@18
d_type -> char@19
ID -> alpha@19
COMMA -> ,@19
ID -> beta@19
semicolon -> ;@19
d_type -> int@20
ID -> gg@20
semicolon -> ;@20
input -> cin@21
i_cas -> >>@21
ID -> x@21
semicolon -> ;@21
output -> cout@22
o_cas -> <<@22
CHARACTER -> 'N'@22
semicolon -> ;@22
if_token -> if@23
open_first_bracket -> (@23
ID -> x@23
comp_op -> >@23
INTEGER -> 10@23
close_first_bracket -> )@23
then_token -> then@23
open_second_bracket -> {@24
d_type -> int@25
ID -> num@25
semicolon -> ;@25
d_type -> real@26
ID -> number@26
semicolon -> ;@26
output -> cout@27
o_cas -> <<@27
CHARACTER -> 'Y'@27
o_cas -> <<@27
ID -> x@27
semicolon -> ;@27
close_second_bracket -> }@28
semicolon -> ;@28
close_second_bracket -> }@29
semicolon -> ;@29
ID -> x@31
equals -> =@31
INTEGER -> 20@31
semicolon -> ;@31
d_type -> int@33
ID -> a@33
equals -> =@33
INTEGER -> 5@33
semicolon -> ;@33
d_type -> real@34
ID -> b@34
equals -> =@34
REAL -> 3.2@34
semicolon -> ;@34
output -> cout@35
o_cas -> <<@35
ID -> a@35
semicolon -> ;@35
if_token -> if@37
open_first_bracket -> (@37
ID -> a@37
comp_op -> ==@37
INTEGER -> 5@37
close_first_bracket -> )@37
then_token -> then@37
open_second_bracket -> {@38
output -> cout@39
o_cas -> <<@39
ID -> b@39
semicolon -> ;@39
close_second_bracket -> }@40
else_token -> else@41
open_second_bracket -> {@42
output -> cout@43
o_cas -> <<@43
ID -> a@43
o_cas -> <<@43
ID -> b@43
semicolon -> ;@43
if_token -> if@44
open_first_bracket -> (@44
ID -> a@44
comp_op -> >@44
INTEGER -> 10@44
close_first_bracket -> )@44
then_token -> then@44
open_second_bracket -> {@45
output -> cout@46
o_cas -> <<@46
ID -> io@46
semicolon -> ;@46
d_type -> real@47
ID -> io@47
semicolon -> ;@47
output -> cout@48
o_cas -> <<@48
CHARACTER -> 'Z'@48
o_cas -> <<@48
ID -> a@48
semicolon -> ;@48
close_second_bracket -> }@49
semicolon -> ;@49
close_second_bracket -> }@50
semicolon -> ;@50
close_second_bracket -> }@51
